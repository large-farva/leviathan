name: Leviathan Pipeline

on:
  push:
    branches:
      - main
      - testing
  pull_request:
    branches:
      - main
      - testing
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      flavor:
        description: 'Flavor to build (leviathan, leviathan-dx, or both)'
        required: false
        default: 'both'

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  ARTIFACTHUB_LOGO_URL: "https://raw.githubusercontent.com/${{ github.repository }}/main/repo_files/branding/logo.png"

jobs:
  build_push:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        flavor:
          - name: leviathan
            base: ghcr.io/ublue-os/bazzite-gnome-nvidia:latest
          - name: leviathan-dx
            base: ghcr.io/ublue-os/bluefin-nvidia:latest
    continue-on-error: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Current Date
        id: date
        run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Conditional Flavor Filter
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.flavor != 'both' && matrix.flavor.name != github.event.inputs.flavor
        run: echo "Skipping flavor: ${{ matrix.flavor.name }}" && exit 0

      - name: Generate Image Metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          tags: |
            type=raw,value=${{ matrix.flavor.name }}-latest
            type=raw,value=${{ matrix.flavor.name }}-${{ steps.date.outputs.date }}
            type=raw,value=latest
            type=sha,enable=true
          labels: |
            org.opencontainers.image.title=Leviathan (${{ matrix.flavor.name }})
            org.opencontainers.image.description=Customized Fedora Atomic image (${{ matrix.flavor.name }}) by Large-Farva
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/Containerfile
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.keywords=ublue,leviathan,fedora,atomic
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.prerelease=${{ github.ref != 'refs/heads/main' }}

      - name: Build OCI Image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ matrix.flavor.name }}
          build-args: |
            BASE_IMAGE=${{ matrix.flavor.base }}
            FLAVOR=${{ matrix.flavor.name }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push Image to GHCR
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          image: ${{ matrix.flavor.name }}
          tags: ${{ steps.metadata.outputs.tags }}

      - name: Install Cosign for Signing
        uses: sigstore/cosign-installer@v3

      - name: Sign OCI Images
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ matrix.flavor.name }}"
          echo "Signing image $IMAGE_FULL with tags:"
          echo "${{ steps.metadata.outputs.tags }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
          done
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Verify OCI Image Signatures
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ matrix.flavor.name }}"
          echo "Verifying signed image $IMAGE_FULL with tags:"
          echo "${{ steps.metadata.outputs.tags }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            cosign verify --key env://COSIGN_PUBLIC_KEY $IMAGE_FULL:$tag
          done
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.SIGNING_PUBLIC_KEY }}
